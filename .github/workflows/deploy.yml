name: Deploy to Hetzner

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HETZNER_SSH }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Install Docker & Docker Compose on Hetzner
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
          apt-get update -y
          apt-get install -y docker.io
          systemctl enable --now docker
          curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          systemctl status docker
          EOF

      - name: Clean-up old deployment files
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'
          # Delete everything in /home/deploy except the strapi-data and uploads folders
          find /home/deploy -mindepth 1 -maxdepth 1 ! -name 'strapi-data' ! -name 'uploads' -exec rm -rf {} \;
          EOF

      - name: Check/Create Directories & Copy Files
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'
          # Check if /home/deploy exists, and create it if not
          if [ ! -d "/home/deploy" ]; then
            mkdir -p /home/deploy
          fi

          # Check if /home/deploy/backend exists, and create it if not
          if [ ! -d "/home/deploy/backend" ]; then
            mkdir -p /home/deploy/backend
          fi

          # Check if /home/deploy/frontend exists, and create it if not
          if [ ! -d "/home/deploy/frontend" ]; then
            mkdir -p /home/deploy/frontend
          fi

          # Check if /home/deploy/frontend/blog exists, and create it if not
          if [ ! -d "/home/deploy/frontend/blog" ]; then
            mkdir -p /home/deploy/frontend/blog
          fi

          # Check if /home/deploy/strapi-data exists, and create it if not (for SQLite persistence)
          if [ ! -d "/home/deploy/strapi-data" ]; then
            mkdir -p /home/deploy/strapi-data
          fi

          # Check if /home/deploy/uploads exists, and create it if not (for media uploads persistence)
          if [ ! -d "/home/deploy/uploads" ]; then
            mkdir -p /home/deploy/uploads
          fi

          # Now copy the files correctly
          EOF

          # Copy backend and frontend files to server
          scp -r ./backend/* root@${{ secrets.SERVER_IP }}:/home/deploy/backend/
          scp -r ./frontend/blog/* root@${{ secrets.SERVER_IP }}:/home/deploy/frontend/blog
          scp ./docker-compose.yml root@${{ secrets.SERVER_IP }}:/home/deploy/

      - name: Create .env file on Hetzner
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'
          echo "NEXT_PUBLIC_STRAPI_API_URL=${{ secrets.NEXT_PUBLIC_STRAPI_API_URL }}" > /home/deploy/.env
          echo "APP_KEYS=${{ secrets.APP_KEYS }}" >> /home/deploy/.env
          echo "API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}" >> /home/deploy/.env
          echo "ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}" >> /home/deploy/.env
          echo "TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}" >> /home/deploy/.env
          echo "DATABASE_CLIENT=${{ secrets.DATABASE_CLIENT }}" >> /home/deploy/.env
          echo "DATABASE_FILENAME=${{ secrets.DATABASE_FILENAME }}" >> /home/deploy/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/deploy/.env
          echo "DATABASE_SSL=${{ secrets.DATABASE_SSL }}" >> /home/deploy/.env
          echo "HOST=${{ secrets.HOST }}" >> /home/deploy/.env
          echo "PORT=${{ secrets.PORT }}" >> /home/deploy/.env
          EOF

      - name: Build & Deploy Docker Images
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'

          cd /home/deploy/backend
          docker build --no-cache -t backend:latest .

          cd /home/deploy/frontend/blog
          docker build --no-cache -t frontend:latest .

          if ! docker network ls --filter name=blog_network -q; then
            docker network create blog_network
          fi

          docker-compose down
          docker-compose up -d
          EOF
