name: Deploy to Hetzner

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HETZNER_SSH }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Install Docker & Docker Compose on Hetzner
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
          apt-get update -y
          apt-get install -y docker.io
          systemctl enable --now docker
          curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          systemctl status docker
          EOF

      - name: Check/Create Directories & Copy Files
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'
          # Check if /home/deploy exists, and create it if not
          if [ ! -d "/home/deploy" ]; then
            mkdir -p /home/deploy
          fi

          # Check if /home/deploy/backend exists, and create it if not
          if [ ! -d "/home/deploy/backend" ]; then
            mkdir -p /home/deploy/backend
          fi

          # Check if /home/deploy/frontend exists, and create it if not
          if [ ! -d "/home/deploy/frontend" ]; then
            mkdir -p /home/deploy/frontend
          fi

          # Check if /home/deploy/frontend/blog exists, and create it if not
          if [ ! -d "/home/deploy/frontend/blog" ]; then
            mkdir -p /home/deploy/frontend/blog
          fi

          # Now copy the files correctly
          EOF

          # Copy backend and frontend files to server
          scp -r ./backend root@${{ secrets.SERVER_IP }}:/home/deploy/backend/
          scp -r ./frontend/blog root@${{ secrets.SERVER_IP }}:/home/deploy/frontend/blog

      - name: Build & Deploy Docker Images
        run: |
          ssh root@${{ secrets.SERVER_IP }} << 'EOF'
          # Change to the correct directories and build the Docker images
          cd /home/deploy/backend
          docker build -t backend:latest .

          cd /home/deploy/frontend/blog
          docker build -t frontend:latest .

          docker network create blog_network
          docker-compose down
          docker-compose up -d
          EOF
