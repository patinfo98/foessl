---
- name: Deploy to Hetzner without Inventory
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Install Docker & Docker Compose
      apt:
        name:
          - docker.io
          - curl
        state: present
        update_cache: yes

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: 'u+x'

    - name: Ensure backend and frontend directories exist
      file:
        path: "/home/deploy/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - backend
        - frontend/blog
        - strapi-data
        - uploads

    - name: Sync files using rsync
      synchronize:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        recursive: yes
        delete: yes
      loop:
        - { src: "./backend/", dest: "/home/deploy/backend/" }
        - { src: "./frontend/blog/", dest: "/home/deploy/frontend/blog/" }
        - { src: "./docker-compose.yml", dest: "/home/deploy/docker-compose.yml" }

    - name: Create .env file on Hetzner
      copy:
        content: |
          NEXT_PUBLIC_STRAPI_API_URL={{ NEXT_PUBLIC_STRAPI_API_URL }}
          APP_KEYS={{ APP_KEYS }}
          API_TOKEN_SALT={{ API_TOKEN_SALT }}
          ADMIN_JWT_SECRET={{ ADMIN_JWT_SECRET }}
          TRANSFER_TOKEN_SALT={{ TRANSFER_TOKEN_SALT }}
          DATABASE_CLIENT={{ DATABASE_CLIENT }}
          DATABASE_FILENAME={{ DATABASE_FILENAME }}
          JWT_SECRET={{ JWT_SECRET }}
          DATABASE_SSL={{ DATABASE_SSL }}
          HOST={{ HOST }}
          PORT={{ PORT }}
        dest: /home/deploy/.env

    - name: Build Docker Images
      docker_image:
        build:
          path: "/home/deploy/{{ item }}"
          tag: "{{ item }}:latest"
      loop:
        - backend
        - frontend/blog

    - name: Create Docker network if it doesn't exist
      docker_network:
        name: blog_network
        state: present

    - name: Restart and deploy with docker-compose
      docker_compose:
        project_src: /home/deploy
        restarted: yes
        removed: yes
